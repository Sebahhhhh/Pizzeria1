import java.io.*;
import java.net.*;
import java.util.Random;

public class Client {

    private Socket requestSocket;
    private ObjectOutputStream out;
    private ObjectInputStream in;
    private String message;

    Client() {
    }

    void run() {
        try {
            //1. creating a socket to connect to the server
            requestSocket = new Socket("localhost", 9999);
            System.out.println("Connected to localhost in port 9999");
            //2. get Input and Output streams
            out = new ObjectOutputStream(requestSocket.getOutputStream());
            out.flush();
            in = new ObjectInputStream(requestSocket.getInputStream());
            //3: Communicating with the server
            do {
                try {
                    message = (String) in.readObject();
                    System.out.println(" + Pizzeria " + message);
                    if (message.contains("[")) {
                        // prendi la lista di pizze dal messaggio
                        String[] pizze = message.substring(1, message.length() - 1).split(", ");
                        // prende una pizza a casoo
                        String pizzascelta = pizze[new Random().nextInt(pizze.length)];
                        sendMessage(pizzascelta);
                    } else if (message.startsWith("Eccoti la pizza:")) {
                        System.out.println("Pizza ricevuta: " + message);
                        sendMessage("Arrivederci");
                    }
                } catch (ClassNotFoundException classNot) {
                    System.err.println("data received in unknown format");
                }
            } while (!message.equals("Arrivederci"));
        } catch (UnknownHostException unknownHost) {
            System.err.println("You are trying to connect to an unknown host!");
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } finally {
            //4: Closing connection
            try {
                in.close();
                out.close();
                requestSocket.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    void sendMessage(String msg) {
        try {
            out.writeObject(msg);
            out.flush();
            System.out.println(" - Cliente >" + msg);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    public static void main(String args[]) {
        Client client = new Client();
        client.run();
    }
}
